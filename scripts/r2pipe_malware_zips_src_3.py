import requests
import json
import time
import os
import random

DOWNLOADED_LOG = "downloaded.txt"
STATUS_LOG = "status_log.txt"
SAVE_DIR = 'M:\\Ransomware_Lab\\malware_zips3'
API_KEY = 'bf736607454ae7d876e34af8aec0cb89930289e18fa44a38'
BASE_URL = 'https://mb-api.abuse.ch/api/v1/'

def log_download(sha256_hash):
    with open(DOWNLOADED_LOG, "a") as f:
        f.write(f"{sha256_hash}\n")

def already_downloaded(sha256_hash):
    if not os.path.exists(DOWNLOADED_LOG):
        return False
    with open(DOWNLOADED_LOG, "r") as f:
        return sha256_hash in f.read()

def log_status(message):
    with open(STATUS_LOG, "a") as f:
        f.write(f"{message}\n")

def fetch_ransomware_metadata():
    url = BASE_URL
    data = {
        'query': 'get_taginfo',
        'tag': 'ransomware',
        'file_type': 'exe',
        'limit': 1000,
        'apikey': API_KEY
    }

    response = requests.post(url, data=data)
    if response.status_code != 200:
        print("Error fetching metadata:", response.status_code)
        return []

    result = response.json()
    if result.get('query_status') != 'ok':
        print("Failed to fetch metadata:", result.get('query_status'))
        return []
    
    return result['data']

def download_sample(sha256_hash, retries=5, delay=3):
    url = BASE_URL
    data = {
        'query': 'get_file',
        'sha256_hash': sha256_hash,
        'apikey': API_KEY
    }

    if not os.path.exists(SAVE_DIR):
        os.makedirs(SAVE_DIR)

    for attempt in range(retries):
        try:
            response = requests.post(url, data=data, timeout=30)
            if response.status_code == 200 and b'PK' in response.content[:2]:
                zip_path = os.path.join(SAVE_DIR, f'{sha256_hash}.zip')
                with open(zip_path, 'wb') as f:
                    f.write(response.content)
                print(f'Sample {sha256_hash} downloaded successfully!')
                log_download(sha256_hash)
                log_status(f'{sha256_hash} - Downloaded and logged.')
                return True
            else:
                print(f"Failed attempt {attempt+1} for {sha256_hash}. Status: {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"Error downloading {sha256_hash} on attempt {attempt+1}: {e}")
        
        time.sleep(delay + random.uniform(0, 1))
    
    log_status(f'{sha256_hash} - Failed to download after {retries} retries.')
    return False

def main():
    metadata = fetch_ransomware_metadata()
    print(f'Total samples to process: {len(metadata)}')

    for sample in metadata:
        sha256_hash = sample['sha256_hash']
        zip_path = os.path.join(SAVE_DIR, f'{sha256_hash}.zip')

        if os.path.exists(zip_path):
            print(f'Sample {sha256_hash} already exists in folder. Skipping.')
            log_status(f'{sha256_hash} - Skipped (Already in folder).')
            continue

        if already_downloaded(sha256_hash):
            print(f'Sample {sha256_hash} is logged but missing in folder. Re-downloading.')
            # still attempts download and logs again
            download_sample(sha256_hash)
            continue

        # Fresh download
        success = download_sample(sha256_hash)
        if not success:
            print(f'Failed to download {sha256_hash} after retries.')

        time.sleep(2)

if __name__ == "__main__":
    main()
